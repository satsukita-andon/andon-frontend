name: ci

on: [push, pull_request]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: '12' # for firebase functions
      - uses: actions/cache@v2
        with:
          # see: https://github.com/actions/cache/blob/main/examples.md#macos-and-ubuntu
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - run: npm ci
      - run: npm run type-check
      - run: npm run lint
      - run: npm run build

  deploy-info:
    outputs:
      needs-deploy: ${{ fromJSON(steps.deploy-info.outputs.result).needsDeploy }}
      firebase-project-id: ${{ fromJSON(steps.deploy-info.outputs.result).firebaseProjectId }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/github-script@v3
        id: deploy-info
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            // master or semver tag (e.g., v1.0.0)
            const firebaseProjectId = (() => {
              if (context.ref === 'refs/heads/master') {
                return 'satsukita-andon-dev';
              } else if (context.ref.startsWith('refs/tags/v')) {
                return 'satsukita-andon';
              } else {
                return null;
              }
            })();
            return {
              needsDeploy: firebaseProjectId !== null,
              firebaseProjectId,
            };

  deploy:
    needs: [deploy-info, build]
    if: ${{ needs.deploy-info.outputs.needs-deploy }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - run: |
          echo "${{ needs.deploy-info.outputs.needs-deploy }}"
          echo "${{ needs.deploy-info.outputs.firebase-project-id }}"
      - env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
          PROJECT_ID: ${{ needs.deploy-info.outputs.firebase-project-id }}
        run: |
          npm ci
          firebase deploy --project "${PROJECT_ID}"
